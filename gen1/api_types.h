/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef api_TYPES_H
#define api_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace org { namespace example { namespace msgrpc { namespace thrift {

class ResponseData;

typedef struct _ResponseData__isset {
  _ResponseData__isset() : pet_id(false), pet_name(false), pet_weight(false) {}
  bool pet_id :1;
  bool pet_name :1;
  bool pet_weight :1;
} _ResponseData__isset;

class ResponseData {
 public:

  ResponseData(const ResponseData&);
  ResponseData& operator=(const ResponseData&);
  ResponseData() : pet_id(0), pet_name(), pet_weight(0) {
  }

  virtual ~ResponseData() throw();
  int32_t pet_id;
  std::string pet_name;
  int32_t pet_weight;

  _ResponseData__isset __isset;

  void __set_pet_id(const int32_t val);

  void __set_pet_name(const std::string& val);

  void __set_pet_weight(const int32_t val);

  bool operator == (const ResponseData & rhs) const
  {
    if (!(pet_id == rhs.pet_id))
      return false;
    if (!(pet_name == rhs.pet_name))
      return false;
    if (!(pet_weight == rhs.pet_weight))
      return false;
    return true;
  }
  bool operator != (const ResponseData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResponseData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResponseData &a, ResponseData &b);

inline std::ostream& operator<<(std::ostream& out, const ResponseData& obj)
{
  obj.printTo(out);
  return out;
}

}}}} // namespace

#endif
