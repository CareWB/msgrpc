/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Petstore_H
#define Petstore_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "api_types.h"

namespace org { namespace example { namespace msgrpc { namespace demo {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class PetstoreIf {
 public:
  virtual ~PetstoreIf() {}
  virtual void get_pet_info(ResponseData& _return, const RequestData& req) = 0;
};

class PetstoreIfFactory {
 public:
  typedef PetstoreIf Handler;

  virtual ~PetstoreIfFactory() {}

  virtual PetstoreIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PetstoreIf* /* handler */) = 0;
};

class PetstoreIfSingletonFactory : virtual public PetstoreIfFactory {
 public:
  PetstoreIfSingletonFactory(const boost::shared_ptr<PetstoreIf>& iface) : iface_(iface) {}
  virtual ~PetstoreIfSingletonFactory() {}

  virtual PetstoreIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PetstoreIf* /* handler */) {}

 protected:
  boost::shared_ptr<PetstoreIf> iface_;
};

class PetstoreNull : virtual public PetstoreIf {
 public:
  virtual ~PetstoreNull() {}
  void get_pet_info(ResponseData& /* _return */, const RequestData& /* req */) {
    return;
  }
};

typedef struct _Petstore_get_pet_info_args__isset {
  _Petstore_get_pet_info_args__isset() : req(false) {}
  bool req :1;
} _Petstore_get_pet_info_args__isset;

class Petstore_get_pet_info_args {
 public:

  Petstore_get_pet_info_args(const Petstore_get_pet_info_args&);
  Petstore_get_pet_info_args& operator=(const Petstore_get_pet_info_args&);
  Petstore_get_pet_info_args() {
  }

  virtual ~Petstore_get_pet_info_args() throw();
  RequestData req;

  _Petstore_get_pet_info_args__isset __isset;

  void __set_req(const RequestData& val);

  bool operator == (const Petstore_get_pet_info_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const Petstore_get_pet_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Petstore_get_pet_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Petstore_get_pet_info_pargs {
 public:


  virtual ~Petstore_get_pet_info_pargs() throw();
  const RequestData* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Petstore_get_pet_info_result__isset {
  _Petstore_get_pet_info_result__isset() : success(false) {}
  bool success :1;
} _Petstore_get_pet_info_result__isset;

class Petstore_get_pet_info_result {
 public:

  Petstore_get_pet_info_result(const Petstore_get_pet_info_result&);
  Petstore_get_pet_info_result& operator=(const Petstore_get_pet_info_result&);
  Petstore_get_pet_info_result() {
  }

  virtual ~Petstore_get_pet_info_result() throw();
  ResponseData success;

  _Petstore_get_pet_info_result__isset __isset;

  void __set_success(const ResponseData& val);

  bool operator == (const Petstore_get_pet_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Petstore_get_pet_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Petstore_get_pet_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Petstore_get_pet_info_presult__isset {
  _Petstore_get_pet_info_presult__isset() : success(false) {}
  bool success :1;
} _Petstore_get_pet_info_presult__isset;

class Petstore_get_pet_info_presult {
 public:


  virtual ~Petstore_get_pet_info_presult() throw();
  ResponseData* success;

  _Petstore_get_pet_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PetstoreClient : virtual public PetstoreIf {
 public:
  PetstoreClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PetstoreClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_pet_info(ResponseData& _return, const RequestData& req);
  void send_get_pet_info(const RequestData& req);
  void recv_get_pet_info(ResponseData& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PetstoreProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PetstoreIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PetstoreProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_pet_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PetstoreProcessor(boost::shared_ptr<PetstoreIf> iface) :
    iface_(iface) {
    processMap_["get_pet_info"] = &PetstoreProcessor::process_get_pet_info;
  }

  virtual ~PetstoreProcessor() {}
};

class PetstoreProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PetstoreProcessorFactory(const ::boost::shared_ptr< PetstoreIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PetstoreIfFactory > handlerFactory_;
};

class PetstoreMultiface : virtual public PetstoreIf {
 public:
  PetstoreMultiface(std::vector<boost::shared_ptr<PetstoreIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PetstoreMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PetstoreIf> > ifaces_;
  PetstoreMultiface() {}
  void add(boost::shared_ptr<PetstoreIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_pet_info(ResponseData& _return, const RequestData& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_pet_info(_return, req);
    }
    ifaces_[i]->get_pet_info(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class PetstoreConcurrentClient : virtual public PetstoreIf {
 public:
  PetstoreConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PetstoreConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_pet_info(ResponseData& _return, const RequestData& req);
  int32_t send_get_pet_info(const RequestData& req);
  void recv_get_pet_info(ResponseData& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}}} // namespace

#endif
