/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "api_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace org { namespace example { namespace msgrpc { namespace thrift {


EmbeddedStruct::~EmbeddedStruct() throw() {
}


void EmbeddedStruct::__set_es_i8(const int8_t val) {
  this->es_i8 = val;
}

void EmbeddedStruct::__set_es_i16(const int16_t val) {
  this->es_i16 = val;
}

uint32_t EmbeddedStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->es_i8);
          this->__isset.es_i8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->es_i16);
          this->__isset.es_i16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EmbeddedStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EmbeddedStruct");

  xfer += oprot->writeFieldBegin("es_i8", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->es_i8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("es_i16", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->es_i16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EmbeddedStruct &a, EmbeddedStruct &b) {
  using ::std::swap;
  swap(a.es_i8, b.es_i8);
  swap(a.es_i16, b.es_i16);
  swap(a.__isset, b.__isset);
}

EmbeddedStruct::EmbeddedStruct(const EmbeddedStruct& other0) {
  es_i8 = other0.es_i8;
  es_i16 = other0.es_i16;
  __isset = other0.__isset;
}
EmbeddedStruct& EmbeddedStruct::operator=(const EmbeddedStruct& other1) {
  es_i8 = other1.es_i8;
  es_i16 = other1.es_i16;
  __isset = other1.__isset;
  return *this;
}
void EmbeddedStruct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EmbeddedStruct(";
  out << "es_i8=" << to_string(es_i8);
  out << ", " << "es_i16=" << to_string(es_i16);
  out << ")";
}


ResponseData::~ResponseData() throw() {
}


void ResponseData::__set_pet_id(const int32_t val) {
  this->pet_id = val;
}

void ResponseData::__set_pet_name(const std::string& val) {
  this->pet_name = val;
}

void ResponseData::__set_pet_weight(const int32_t val) {
  this->pet_weight = val;
}

void ResponseData::__set_pet_i8_value(const int8_t val) {
  this->pet_i8_value = val;
}

void ResponseData::__set_pet_i16_value(const int16_t val) {
  this->pet_i16_value = val;
}

void ResponseData::__set_pet_i64_value(const int64_t val) {
  this->pet_i64_value = val;
}

void ResponseData::__set_pet_double_value(const double val) {
  this->pet_double_value = val;
}

void ResponseData::__set_pet_bool_value(const bool val) {
  this->pet_bool_value = val;
}

void ResponseData::__set_pet_binary_value(const std::string& val) {
  this->pet_binary_value = val;
}

void ResponseData::__set_pet_embedded_struct(const EmbeddedStruct& val) {
  this->pet_embedded_struct = val;
}

void ResponseData::__set_pet_list_i32(const std::vector<int32_t> & val) {
  this->pet_list_i32 = val;
}

void ResponseData::__set_pet_list_of_struct(const std::vector<EmbeddedStruct> & val) {
  this->pet_list_of_struct = val;
}

void ResponseData::__set_pet_list_of_bool(const std::vector<bool> & val) {
  this->pet_list_of_bool = val;
}

void ResponseData::__set_pet_set_of_i32(const std::set<int32_t> & val) {
  this->pet_set_of_i32 = val;
}

void ResponseData::__set_pet_set_of_struct(const std::set<EmbeddedStruct> & val) {
  this->pet_set_of_struct = val;
}

void ResponseData::__set_pet_map_i32_string(const std::map<int32_t, std::string> & val) {
  this->pet_map_i32_string = val;
}

uint32_t ResponseData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pet_id);
          this->__isset.pet_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pet_name);
          this->__isset.pet_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pet_weight);
          this->__isset.pet_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->pet_i8_value);
          this->__isset.pet_i8_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->pet_i16_value);
          this->__isset.pet_i16_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->pet_i64_value);
          this->__isset.pet_i64_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pet_double_value);
          this->__isset.pet_double_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->pet_bool_value);
          this->__isset.pet_bool_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->pet_binary_value);
          this->__isset.pet_binary_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pet_embedded_struct.read(iprot);
          this->__isset.pet_embedded_struct = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pet_list_i32.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->pet_list_i32.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readI32(this->pet_list_i32[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pet_list_i32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pet_list_of_struct.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->pet_list_of_struct.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->pet_list_of_struct[_i11].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pet_list_of_struct = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pet_list_of_bool.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->pet_list_of_bool.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readBool(this->pet_list_of_bool[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pet_list_of_bool = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->pet_set_of_i32.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readSetBegin(_etype20, _size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              int32_t _elem22;
              xfer += iprot->readI32(_elem22);
              this->pet_set_of_i32.insert(_elem22);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.pet_set_of_i32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->pet_set_of_struct.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _etype26;
            xfer += iprot->readSetBegin(_etype26, _size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              EmbeddedStruct _elem28;
              xfer += _elem28.read(iprot);
              this->pet_set_of_struct.insert(_elem28);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.pet_set_of_struct = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->pet_map_i32_string.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _ktype30;
            ::apache::thrift::protocol::TType _vtype31;
            xfer += iprot->readMapBegin(_ktype30, _vtype31, _size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              int32_t _key34;
              xfer += iprot->readI32(_key34);
              std::string& _val35 = this->pet_map_i32_string[_key34];
              xfer += iprot->readString(_val35);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.pet_map_i32_string = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResponseData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ResponseData");

  xfer += oprot->writeFieldBegin("pet_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->pet_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->pet_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_weight", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->pet_weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_i8_value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->pet_i8_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_i16_value", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->pet_i16_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_i64_value", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->pet_i64_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_double_value", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->pet_double_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_bool_value", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->pet_bool_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_binary_value", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeBinary(this->pet_binary_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_embedded_struct", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->pet_embedded_struct.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_list_i32", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->pet_list_i32.size()));
    std::vector<int32_t> ::const_iterator _iter36;
    for (_iter36 = this->pet_list_i32.begin(); _iter36 != this->pet_list_i32.end(); ++_iter36)
    {
      xfer += oprot->writeI32((*_iter36));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_list_of_struct", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pet_list_of_struct.size()));
    std::vector<EmbeddedStruct> ::const_iterator _iter37;
    for (_iter37 = this->pet_list_of_struct.begin(); _iter37 != this->pet_list_of_struct.end(); ++_iter37)
    {
      xfer += (*_iter37).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_list_of_bool", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->pet_list_of_bool.size()));
    std::vector<bool> ::const_iterator _iter38;
    for (_iter38 = this->pet_list_of_bool.begin(); _iter38 != this->pet_list_of_bool.end(); ++_iter38)
    {
      xfer += oprot->writeBool((*_iter38));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_set_of_i32", ::apache::thrift::protocol::T_SET, 14);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->pet_set_of_i32.size()));
    std::set<int32_t> ::const_iterator _iter39;
    for (_iter39 = this->pet_set_of_i32.begin(); _iter39 != this->pet_set_of_i32.end(); ++_iter39)
    {
      xfer += oprot->writeI32((*_iter39));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_set_of_struct", ::apache::thrift::protocol::T_SET, 15);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pet_set_of_struct.size()));
    std::set<EmbeddedStruct> ::const_iterator _iter40;
    for (_iter40 = this->pet_set_of_struct.begin(); _iter40 != this->pet_set_of_struct.end(); ++_iter40)
    {
      xfer += (*_iter40).write(oprot);
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pet_map_i32_string", ::apache::thrift::protocol::T_MAP, 16);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->pet_map_i32_string.size()));
    std::map<int32_t, std::string> ::const_iterator _iter41;
    for (_iter41 = this->pet_map_i32_string.begin(); _iter41 != this->pet_map_i32_string.end(); ++_iter41)
    {
      xfer += oprot->writeI32(_iter41->first);
      xfer += oprot->writeString(_iter41->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResponseData &a, ResponseData &b) {
  using ::std::swap;
  swap(a.pet_id, b.pet_id);
  swap(a.pet_name, b.pet_name);
  swap(a.pet_weight, b.pet_weight);
  swap(a.pet_i8_value, b.pet_i8_value);
  swap(a.pet_i16_value, b.pet_i16_value);
  swap(a.pet_i64_value, b.pet_i64_value);
  swap(a.pet_double_value, b.pet_double_value);
  swap(a.pet_bool_value, b.pet_bool_value);
  swap(a.pet_binary_value, b.pet_binary_value);
  swap(a.pet_embedded_struct, b.pet_embedded_struct);
  swap(a.pet_list_i32, b.pet_list_i32);
  swap(a.pet_list_of_struct, b.pet_list_of_struct);
  swap(a.pet_list_of_bool, b.pet_list_of_bool);
  swap(a.pet_set_of_i32, b.pet_set_of_i32);
  swap(a.pet_set_of_struct, b.pet_set_of_struct);
  swap(a.pet_map_i32_string, b.pet_map_i32_string);
  swap(a.__isset, b.__isset);
}

ResponseData::ResponseData(const ResponseData& other42) {
  pet_id = other42.pet_id;
  pet_name = other42.pet_name;
  pet_weight = other42.pet_weight;
  pet_i8_value = other42.pet_i8_value;
  pet_i16_value = other42.pet_i16_value;
  pet_i64_value = other42.pet_i64_value;
  pet_double_value = other42.pet_double_value;
  pet_bool_value = other42.pet_bool_value;
  pet_binary_value = other42.pet_binary_value;
  pet_embedded_struct = other42.pet_embedded_struct;
  pet_list_i32 = other42.pet_list_i32;
  pet_list_of_struct = other42.pet_list_of_struct;
  pet_list_of_bool = other42.pet_list_of_bool;
  pet_set_of_i32 = other42.pet_set_of_i32;
  pet_set_of_struct = other42.pet_set_of_struct;
  pet_map_i32_string = other42.pet_map_i32_string;
  __isset = other42.__isset;
}
ResponseData& ResponseData::operator=(const ResponseData& other43) {
  pet_id = other43.pet_id;
  pet_name = other43.pet_name;
  pet_weight = other43.pet_weight;
  pet_i8_value = other43.pet_i8_value;
  pet_i16_value = other43.pet_i16_value;
  pet_i64_value = other43.pet_i64_value;
  pet_double_value = other43.pet_double_value;
  pet_bool_value = other43.pet_bool_value;
  pet_binary_value = other43.pet_binary_value;
  pet_embedded_struct = other43.pet_embedded_struct;
  pet_list_i32 = other43.pet_list_i32;
  pet_list_of_struct = other43.pet_list_of_struct;
  pet_list_of_bool = other43.pet_list_of_bool;
  pet_set_of_i32 = other43.pet_set_of_i32;
  pet_set_of_struct = other43.pet_set_of_struct;
  pet_map_i32_string = other43.pet_map_i32_string;
  __isset = other43.__isset;
  return *this;
}
void ResponseData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ResponseData(";
  out << "pet_id=" << to_string(pet_id);
  out << ", " << "pet_name=" << to_string(pet_name);
  out << ", " << "pet_weight=" << to_string(pet_weight);
  out << ", " << "pet_i8_value=" << to_string(pet_i8_value);
  out << ", " << "pet_i16_value=" << to_string(pet_i16_value);
  out << ", " << "pet_i64_value=" << to_string(pet_i64_value);
  out << ", " << "pet_double_value=" << to_string(pet_double_value);
  out << ", " << "pet_bool_value=" << to_string(pet_bool_value);
  out << ", " << "pet_binary_value=" << to_string(pet_binary_value);
  out << ", " << "pet_embedded_struct=" << to_string(pet_embedded_struct);
  out << ", " << "pet_list_i32=" << to_string(pet_list_i32);
  out << ", " << "pet_list_of_struct=" << to_string(pet_list_of_struct);
  out << ", " << "pet_list_of_bool=" << to_string(pet_list_of_bool);
  out << ", " << "pet_set_of_i32=" << to_string(pet_set_of_i32);
  out << ", " << "pet_set_of_struct=" << to_string(pet_set_of_struct);
  out << ", " << "pet_map_i32_string=" << to_string(pet_map_i32_string);
  out << ")";
}

}}}} // namespace
