/*TODO: add define service name field, such as ___define_service(demo, ___version(1.0.3))   */

namespace demo {
    ___api_version(1.0.3)


    #define ___fields_of_struct___SingleOptionalFieldStruct(_, ...) \
        _(1, optional, int16_t, value,                  __VA_ARGS__)\
        _(2, required, int64_t, value64,                __VA_ARGS__)
    ___as_struct(SingleOptionalFieldStruct);


    #define ___fields_of_struct___EmbeddedStruct(_, ...)          \
        _(1, required, int8_t,  es_i8,                __VA_ARGS__)\
        _(2, optional, int16_t, es_i16,               __VA_ARGS__)
    ___as_struct(EmbeddedStruct);


    typedef std::map <int32_t, std::string> map_int32_string;
    typedef std::map <std::string, EmbeddedStruct> map_string_struct;
    #define ___fields_of_struct___ResponseData(_, ...)                                  \
        _(1,  required, int32_t,                     pet_id,                __VA_ARGS__)\
        _(2,  required, std::string,                 pet_name,              __VA_ARGS__)\
        _(3,  required, int32_t,                     pet_weight,            __VA_ARGS__)\
        _(4,  required, int8_t,                      pet_i8_value,          __VA_ARGS__)\
        _(5,  required, int16_t,                     pet_i16_value,         __VA_ARGS__)\
        _(6,  required, int64_t,                     pet_i64_value,         __VA_ARGS__)\
        _(7,  required, double,                      pet_double_value,      __VA_ARGS__)\
        _(8,  required, bool,                        pet_bool_value,        __VA_ARGS__)\
        _(9,  required, binary,                      pet_binary_value,      __VA_ARGS__)\
        _(10, required, EmbeddedStruct,              pet_embedded_struct,   __VA_ARGS__)\
        _(11, required, std::vector<int32_t>,        pet_list_i32,          __VA_ARGS__)\
        _(12, required, std::vector<EmbeddedStruct>, pet_list_of_struct,    __VA_ARGS__)\
        _(13, optional, std::vector<bool>,           pet_list_of_bool,      __VA_ARGS__)\
        _(14, optional, std::set<int32_t>,           pet_set_of_i32,        __VA_ARGS__)\
        _(15, optional, std::set<EmbeddedStruct>,    pet_set_of_struct,     __VA_ARGS__)\
        _(16, optional, map_int32_string,            pet_map_i32_string,    __VA_ARGS__)\
        _(17, optional, map_string_struct,           pet_map_string_struct, __VA_ARGS__)
    ___as_struct(ResponseData);


    #define ___fields_of_struct___RequestFoo(_, ...)         \
        _(1, required, int8_t,  fooa,            __VA_ARGS__)\
        _(2, optional, int16_t, foob,            __VA_ARGS__)
    ___as_struct(RequestFoo);

    #define ___fields_of_struct___ResponseBar(_, ...)        \
        _(1, required, int8_t,  bara,            __VA_ARGS__)\
        _(2, optional, int16_t, barb,            __VA_ARGS__)
    ___as_struct(ResponseBar);

#if 0
    #define ___methods_of_interface___IBuzzMath(_, ...)            \
        _(1, ResponseBar, negative_fields, RequestFoo, __VA_ARGS__)\
        _(2, ResponseBar, plus1_to_fields, RequestFoo, __VA_ARGS__)

    ___as_interface(IBuzzMath, __with_interface_id(1))

    /*TODO: interface uniqueness checking*/
#endif


#if 0
    ___define_feature(example_feature1, 1)
    ___define_feature(example_feature2, 2)
    ___define_feature(example_feature3, 3)
#endif

}
